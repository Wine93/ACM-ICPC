set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

"默认文件保存位置
exec 'cd ' . fnameescape('D:\Save Code')
"关闭兼容模式
set nocompatible
"模仿快捷键，如:Ctrl+A全选、Ctrl+C复制、Ctrl+V粘贴等等
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin
"gvim字体设置
set guifont=新宋体:h14:cGB2312
"gvim内部编码
set encoding=utf-8
"当前编辑的文件编码
set fileencoding=chinese
"gvim打开支持编码的文件
set fileencodings=ucs-bom,utf-8,gbk,cp936,gb2312,big5,euc-jp,euc-kr,latin1
"set langmenu=zh_CN
"let $LANG = 'zh_CN.UTF-8'
"解决consle输出乱码
language messages zh_CN.utf-8
"解决菜单乱码
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
"设置终端编码为gvim内部编码encoding
let &termencoding=&encoding
"防止特殊符号无法正常显示
set ambiwidth=double
"缩进尺寸为4个空格
set sw=4
"tab宽度为4个字符
set ts=4
"编辑时将所有tab替换为空格
set et
"按一次backspace就删除4个空格了
set smarttab
"不生成备份文件,如index.html~ 
set nobackup
"开启行号标记
set number
"配色方案为desert
colo desert
"关闭上侧工具栏
set guioptions-=T
"关闭右侧滚动条
set guioptions-=r
"开启自动缩进
set autoindent
"代码折叠
set foldmethod=indent

"一键编译设置
map <F9> :call CompileCpp()<CR>
function CompileCpp()
    set makeprg=g++\ -o\ %<\ %
    silent make
    let myf=expand("%")
    let myfile=substitute(myf,".cpp",".exe","")
    if filereadable(myfile)
        execute "! %< && del %<.exe"
    else
        cope5
    endif
endfunctio


map <F1> :call SetTitle()<CR>
func SetTitle()
let l = 0
let l = l + 1 | call setline(l,'# include<map>')
let l = l + 1 | call setline(l,'# include<set>')
let l = l + 1 | call setline(l,'# include<list>')
let l = l + 1 | call setline(l,'# include<cmath>')
let l = l + 1 | call setline(l,'# include<queue>')
let l = l + 1 | call setline(l,'# include<stack>')
let l = l + 1 | call setline(l,'# include<vector>')
let l = l + 1 | call setline(l,'# include<string>')
let l = l + 1 | call setline(l,'# include<cstdio>')
let l = l + 1 | call setline(l,'# include<cstring>')
let l = l + 1 | call setline(l,'# include<iostream>')
let l = l + 1 | call setline(l,'# include<algorithm>')
let l = l + 1 | call setline(l,'# include<functional>')
let l = l + 1 | call setline(l,'using namespace std;')
let l = l + 1 | call setline(l,'')

let l = l + 1 | call setline(l,'typedef pair<int,int> PII;')
let l = l + 1 | call setline(l,'# define INF 1<<30')
let l = l + 1 | call setline(l,'# define LL long long')
let l = l + 1 | call setline(l,'# define MOD 1000000007')
let l = l + 1 | call setline(l,'# define VI vector<int>')
let l = l + 1 | call setline(l,'# define VLL vector<LL>')
let l = l + 1 | call setline(l,'# define VPII vector<PII>')
let l = l + 1 | call setline(l,'# define VS vector<string>')
let l = l + 1 | call setline(l,'# define PII pair<int,int>')
let l = l + 1 | call setline(l,'')

let l = l + 1 | call setline(l,'# define F first')
let l = l + 1 | call setline(l,'# define S second')
let l = l + 1 | call setline(l,'# define mp make_pair')
let l = l + 1 | call setline(l,'# define pb push_back')
let l = l + 1 | call setline(l,'# define lb lower_bound')
let l = l + 1 | call setline(l,'# define up upper_bound')
let l = l + 1 | call setline(l,'# define lowbit(x)(x&-x)')
let l = l + 1 | call setline(l,'# define lson l,m,rt<<1')
let l = l + 1 | call setline(l,'# define rson m+1,r,rt<<1|1')
let l = l + 1 | call setline(l,'# define clr(x) (x).clear()')
let l = l + 1 | call setline(l,'# define sz(x) ((int)(x).size())')
let l = l + 1 | call setline(l,'# define all(x) (x).begin(),(x).end()')
let l = l + 1 | call setline(l,'# define mem(x,y) memset(x,y,sizeof(x))')
let l = l + 1 | call setline(l,'# define keytree (chd[chd[root][1]][0])')
let l = l + 1 | call setline(l,'# define rep(i,a,b) for(i=(a);i<=(b);i++))')
let l = l + 1 | call setline(l,'# define forall(it,c) for(typeof((c).begin())it=(c).begin();it!=(c).end();it++)')
let l = l + 1 | call setline(l,'')


let l = l + 1 | call setline(l,'int main()')
let l = l + 1 | call setline(l,'{')
let l = l + 1 | call setline(l,'    //freopen("in.txt","r",stdin);')
let l = l + 1 | call setline(l,'    //freopen("out.txt","w",stdout);')
let l = l + 1 | call setline(l,'    return 0;')
let l = l + 1 | call setline(l,'}')
endfunc


map<f4> :call AddComment()<cr>
func AddComment()
    if (getline('.')[0] == '/')
        normal ^xx
    else
        normal 0i//
    endif
endfunc

